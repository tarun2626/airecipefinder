generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String?
  password      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  preferences   UserPreference?
  shoppingLists ShoppingList[]
  savedRecipes  SavedRecipe[]
  accounts      Account[]
  sessions      Session[]
  favorites     Recipe[]        @relation("UserFavorites")
}

model UserPreference {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  dietaryType String[] // e.g., ["vegetarian", "gluten-free"]
  allergies   String[] // e.g., ["peanuts", "shellfish"]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SavedRecipe {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  recipeId   String // Spoonacular API recipe ID
  name       String
  imageUrl   String?
  aiImageUrl String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Recipe {
  id                String             @id @default(cuid())
  externalId        String?            @unique
  title             String
  description       String?            @db.Text
  image             String?
  cookTime          Int?
  servings          Int?
  cuisine           String?
  ingredients       String[]           @db.Text
  instructions      String[]           @db.Text
  dietaryTags       String[]
  favoredBy         User[]             @relation("UserFavorites")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  shoppingListItems ShoppingListItem[]
}

model ShoppingList {
  id        String             @id @default(cuid())
  userId    String
  user      User               @relation(fields: [userId], references: [id])
  name      String
  items     ShoppingListItem[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model ShoppingListItem {
  id             String       @id @default(cuid())
  shoppingListId String
  shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id])
  name           String
  quantity       String?
  checked        Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  recipe         Recipe?      @relation(fields: [recipeId], references: [id])
  recipeId       String?
}
